{"version":3,"sources":["GameBoard/Token/Token.js","GameBoard/GameMove.js","GameBoard/BoardColumn.js","GameBoard/GamePlayer.js","GameBoard/WinnerFinder.js","GameBoard/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["Token","react_default","a","createElement","className","concat","this","props","tokencolour","Component","GameMove","playerId","columnId","rowIndex","Object","classCallCheck","BoardColumn","_this","possibleConstructorReturn","getPrototypeOf","call","generateTokenElements","bind","assertThisInitialized","submitMove","getNextTokenIndex","nextIndex","tokenobjects","some","token","index","ownedBy","move","getcurrentplayer","columnid","movesignal","tokenElements","onClick","map","Fragment","key","GameBoard_Token_Token","playerColour","reverse","Player","playerName","WinnerFinder","coordValidator","winnerFound","winner","BoardState","doesLineContainWin","getOwnerOfTokenAtPosition","newMoveCoords","setBoardSate","isTokenInAWin","apply","toConsumableArray","clearBoardState","columnIndex","getCoordLinesFrom","filter","coordLine","length","_this2","win","matchChainLength","coords","reduce","previousOwner","owner","_this3","NaN","gradient","getSpanCoordLineFrom","_this4","yIntercept","line","Array","forEach","_","newCoord","isNaN","Math","abs","Infinity","push","GameBoard","freshState","nColumns","nRows","players","currentPlayer","moveHistory","gameState","state","objectSpread","initialPlayerIndex","playerColours","generateColumnElements","generateTokenObjects","generateColumnObjects","getCurrentPlayer","getNextPlayerIndex","endCurrentPlayerTurn","createPlayers","isCoordOnBoard","playerNames","cb","arguments","undefined","setState","currentPlayerIndex","indexOf","newMoveHistory","buildGameState","lastMove","slice","analyse","setWinner","player","console","log","column","rowSpace","newGameState","getPlayerById","_this5","tokens","includes","_this6","columnElements","_this7","col","GameBoard_BoardColumn","App","src_GameBoard_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfd76787.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Token.css';\n\nclass Token extends Component {\n\n  render() {\n    return (\n      <div className={`circle ${this.props.tokencolour}`} / >\n    );\n  }\n}\n\nexport default Token;\n","class GameMove {\n\n  constructor(playerId, columnId, rowIndex) {\n    this.playerId = playerId;\n    this.columnId = columnId;\n    this.rowIndex = rowIndex;\n  }\n}\n\nexport default GameMove;","import React, { Component } from 'react';\nimport Token from './Token/Token';\nimport GameMove from './GameMove';\n\nclass BoardColumn extends Component {\n\n  constructor() {\n    super()\n\n    this.generateTokenElements = this.generateTokenElements.bind(this);\n    this.submitMove = this.submitMove.bind(this);\n    this.getNextTokenIndex = this.getNextTokenIndex.bind(this);\n  }\n\n  getNextTokenIndex() {\n    let nextIndex = null\n    this.props.tokenobjects.some((token, index) => {\n      if (token.ownedBy === null) {\n        nextIndex = index;\n        return true;\n      }\n      return false;\n    })\n    return nextIndex;\n  }\n\n  submitMove() {\n    const move = new GameMove(\n      this.props.getcurrentplayer().playerId,\n      this.props.columnid,\n      this.getNextTokenIndex()\n    )\n    if (move.rowIndex !== null) {\n      this.props.movesignal(move);\n    }\n  }\n\n  render() {\n    const tokenElements = this.generateTokenElements();\n\n    return (\n      <div className=\"BoardGridColumn\" onClick={this.submitMove} >\n        {tokenElements}\n      </div>\n    );\n  }\n\n  generateTokenElements() {\n    return this.props.tokenobjects.map((token, index) => {\n      return (\n        <React.Fragment key={index}>\n          <Token tokencolour={token.ownedBy !== null ? token.ownedBy.playerColour : \"grey\"} / >\n        </React.Fragment>\n      )\n    }).reverse()\n  }\n}\n\nexport default BoardColumn;\n","\nclass Player {\n\n  constructor(playerId, playerName, playerColour) {\n    this.playerId = playerId\n    this.playerColour = playerColour\n    this.playerName = playerName\n  }\n}\n\nexport default Player;\n","class WinnerFinder {\n\n  constructor(coordValidator) {\n    this.winnerFound = false;\n    this.winner = null;\n    this.BoardState = null;\n    this.coordValidator = coordValidator;\n\n    this.doesLineContainWin = this.doesLineContainWin.bind(this);\n    this.getOwnerOfTokenAtPosition = this.getOwnerOfTokenAtPosition.bind(this);\n  }\n\n  analyse(BoardState, newMoveCoords) {\n    this.setBoardSate(BoardState);\n\n    if (this.isTokenInAWin(...newMoveCoords)) {\n      this.winnerFound = true;\n      this.winner = this.getOwnerOfTokenAtPosition(...newMoveCoords);\n    }\n\n    this.clearBoardState();\n    return this.winnerFound;\n  }\n\n  setBoardSate(BoardState) {\n    this.BoardState = [].concat(BoardState);\n  }\n\n  clearBoardState() {\n    this.BoardState = null;\n  }\n\n  isTokenInAWin(columnIndex, rowIndex) {\n    const coordLines = this.getCoordLinesFrom(columnIndex, rowIndex);\n\n    return coordLines.filter(coordLine => {\n      return this.doesLineContainWin(coordLine);\n    }).length > 0;\n  }\n\n  doesLineContainWin(coordLine) {\n    let win = false;\n    let matchChainLength = 1;\n\n    coordLine.map(coords => this.getOwnerOfTokenAtPosition(...coords))\n    .reduce((previousOwner, owner) => {\n      if (previousOwner === null || owner === null) {\n        // check if either owners are null\n        return owner;\n      } else if (previousOwner.playerId === owner.playerId) {\n        matchChainLength += 1;\n      }\n\n      if (!win && matchChainLength === 4) {\n        win = true\n      }\n\n      return owner;\n    }, null);\n\n    return win;\n  }\n\n  getCoordLinesFrom(columnIndex, rowIndex) {\n    return [0, NaN, 1, -1].map(gradient => {\n      return this.getSpanCoordLineFrom(columnIndex, rowIndex, gradient);\n    });\n  }\n\n  getSpanCoordLineFrom(columnIndex, rowIndex, gradient) {\n    // y = mx + c #gcsemaths\n    const yIntercept = rowIndex - (columnIndex * gradient);\n    let line = [];\n\n    [...Array(7)].forEach((_, index) => {\n      let newCoord = null;\n      if (isNaN(gradient) || Math.abs(gradient) === Infinity) {\n        newCoord = [columnIndex, index];\n      } else {\n        newCoord = [index, (gradient * index) + yIntercept]\n      }\n      if (this.coordValidator(...newCoord)) line.push(newCoord);\n    })\n\n    return line;\n  }\n\n  getOwnerOfTokenAtPosition(columnIndex, rowIndex) {\n    return this.BoardState[columnIndex][rowIndex].ownedBy;\n  }\n}\n\nexport default WinnerFinder;","import React, { Component } from 'react';\nimport './GameBoard.css';\nimport BoardColumn from './BoardColumn';\nimport Player from './GamePlayer';\nimport WinnerFinder from './WinnerFinder';\n\nclass GameBoard extends Component {\n\n  constructor() {\n    super()\n\n    this.freshState = {\n      nColumns: 7,\n      nRows: 6,\n      players: [],\n      currentPlayer: null,\n      moveHistory: [],\n      gameState: [],\n      winner: null\n    };\n\n    this.state = {...this.freshState};\n\n    this.initialPlayerIndex = 0;\n\n    this.playerColours = ['green', 'pink'];\n\n    this.generateColumnElements = this.generateColumnElements.bind(this);\n    this.generateTokenObjects = this.generateTokenObjects.bind(this);\n    this.generateColumnObjects = this.generateColumnObjects.bind(this);\n    this.getCurrentPlayer = this.getCurrentPlayer.bind(this);\n    this.getNextPlayerIndex = this.getNextPlayerIndex.bind(this);\n    this.endCurrentPlayerTurn = this.endCurrentPlayerTurn.bind(this);\n    this.createPlayers = this.createPlayers.bind(this);\n    this.isCoordOnBoard = this.isCoordOnBoard.bind(this);\n\n    this.WinnerFinder = new WinnerFinder(this.isCoordOnBoard);\n  }\n\n  createPlayers(playerNames, cb=()=>{}) {\n    this.setState({\n      players: playerNames.map((playerName, index) => {\n        return new Player(index, playerName, this.playerColours[index])\n      })\n    }, cb)\n  }\n\n  getCurrentPlayer() {\n    return this.state.currentPlayer;\n  }\n\n  getPlayerById(playerId) {\n    return this.state.players[playerId]\n  }\n\n  getNextPlayerIndex() {\n    const currentPlayerIndex = this.state.players.indexOf(this.getCurrentPlayer());\n    if (currentPlayerIndex + 1 >= this.state.players.length) {\n      return 0;\n    } else {\n      return currentPlayerIndex + 1;\n    }\n  }\n\n  endCurrentPlayerTurn(move) {\n    if (this.state.winner !== null) return;\n    const newMoveHistory = [...this.state.moveHistory, move];\n    this.setState({\n      currentPlayer: this.state.players[this.getNextPlayerIndex()],\n      moveHistory: newMoveHistory,\n      gameState: this.buildGameState(newMoveHistory)\n    }, () => {\n      const lastMove = this.state.moveHistory.slice(-1)[0];\n      this.WinnerFinder.analyse(\n        this.state.gameState,\n        [lastMove.columnId, lastMove.rowIndex]);\n      if (this.WinnerFinder.winnerFound) {\n        this.setWinner(this.WinnerFinder.winner);\n      }\n    })\n  }\n\n  setWinner(player, cb = () => {}) {\n    console.log(player.playerName);\n    this.setState({\n      winner: player\n    }, cb)\n  }\n\n  generateTokenObjects(column) {\n    return column.map(rowSpace => {\n      return {\n        ...rowSpace\n      }\n    })\n  }\n\n  buildGameState(moveHistory = this.state.moveHistory) {\n    const newGameState = [...Array(this.state.nColumns)].map(() => {\n      return [...Array(this.state.nRows)].map((rowSpace, rowIndex) => {\n        return {\n          ownedBy: null,\n          rowIndex\n        }\n      });\n    })\n\n    moveHistory.forEach(move => {\n      newGameState[move.columnId][move.rowIndex]\n        .ownedBy = this.getPlayerById(move.playerId)\n    })\n\n    return newGameState;\n  }\n\n  generateColumnObjects() {\n    return this.state.gameState.map(column => {\n      return {\n        tokens: this.generateTokenObjects(column)\n      }\n    })\n  }\n\n  isCoordOnBoard(columnIndex, rowIndex) {\n    return ![\n      columnIndex < this.state.nColumns,\n      rowIndex < this.state.nRows,\n      columnIndex >= 0,\n      rowIndex >= 0\n    ].includes(false);\n  }\n\n  componentDidMount() {\n    this.setState({gameState: this.buildGameState()}, () => {\n      this.createPlayers(['player1', 'player2'], () => {\n        this.setState({\n          currentPlayer: this.state.players[this.initialPlayerIndex],\n        })\n      })\n    })\n  }\n\n  render() {\n    const columnElements = this.generateColumnElements();\n\n    return (\n      <div className=\"Board\">\n        <p>{this.state.winner ? this.state.winner.playerName : ''}</p>\n        <div className=\"BoardGrid\" >\n          {columnElements}\n        </div>\n      </div>\n    );\n  }\n\n  generateColumnElements() {\n    const columnObjects = this.generateColumnObjects();\n\n    return columnObjects.map((col, index) => {\n      return (\n        <React.Fragment key={index}>\n          <BoardColumn columnid={index}\n            tokenobjects={col.tokens}\n            getcurrentplayer={this.getCurrentPlayer}\n            movesignal={this.endCurrentPlayerTurn} / >\n        </React.Fragment>\n      )\n    })\n  }\n}\n\nexport default GameBoard;\n","import React, { Component } from 'react';\nimport './App.css';\nimport GameBoard from './GameBoard/GameBoard';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            Connect Four\n          </h1>\n        </header>\n        <div className=\"App-game\">\n          <GameBoard/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
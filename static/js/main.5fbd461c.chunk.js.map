{"version":3,"sources":["GameBoard/Token/Token.js","GameBoard/GameMove.js","GameBoard/BoardColumn.js","GameBoard/GamePlayer.js","GameBoard/WinnerFinder.js","GameBoard/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["Token","react_default","a","createElement","className","concat","this","props","tokencolour","Component","GameMove","playerId","columnId","rowIndex","Object","classCallCheck","BoardColumn","_this","possibleConstructorReturn","getPrototypeOf","call","generateTokenElements","bind","assertThisInitialized","submitMove","getNextTokenIndex","nextIndex","tokenobjects","some","token","index","ownedBy","move","getcurrentplayer","columnid","movesignal","tokenElements","onClick","map","Fragment","key","GameBoard_Token_Token","playerColour","reverse","Player","playerName","WinnerFinder","coordValidator","winnerFound","winner","BoardState","getPositionUpFrom","getPositionDownFrom","getPositionRightFrom","getPositionUpRightFrom","getPositionDownRightFrom","isCoordLineWin","getOwnerOfTokenAtPosition","columnIndex","getCoordLinesFrom","filter","coordLine","isCoordLineValid","length","_this2","valid","coord","apply","toConsumableArray","_this3","firstPlayer","matchingUser","owner","_this4","translatorFunc","getCoordLineFrom","above","below","coords","Array","forEach","push","next","slice","_this5","setBoardSate","column","isTokenInAWin","clearBoardState","GameBoard","freshState","nColumns","nRows","players","currentPlayer","moveHistory","gameState","state","objectSpread","initialPlayerIndex","playerColours","generateColumnElements","generateTokenObjects","generateColumnObjects","getCurrentPlayer","getNextPlayerIndex","endCurrentPlayerTurn","createPlayers","isCoordOnBoard","playerNames","cb","arguments","undefined","setState","currentPlayerIndex","indexOf","newMoveHistory","buildGameState","analyse","setWinner","player","console","log","rowSpace","newGameState","getPlayerById","tokens","includes","_this6","columnElements","_this7","col","GameBoard_BoardColumn","App","src_GameBoard_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fbd461c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Token.css';\n\nclass Token extends Component {\n\n  render() {\n    return (\n      <div className={`circle ${this.props.tokencolour}`} / >\n    );\n  }\n}\n\nexport default Token;\n","class GameMove {\n\n  constructor(playerId, columnId, rowIndex) {\n    this.playerId = playerId;\n    this.columnId = columnId;\n    this.rowIndex = rowIndex;\n  }\n}\n\nexport default GameMove;","import React, { Component } from 'react';\nimport Token from './Token/Token';\nimport GameMove from './GameMove';\n\nclass BoardColumn extends Component {\n\n  constructor() {\n    super()\n\n    this.generateTokenElements = this.generateTokenElements.bind(this);\n    this.submitMove = this.submitMove.bind(this);\n    this.getNextTokenIndex = this.getNextTokenIndex.bind(this);\n  }\n\n  getNextTokenIndex() {\n    let nextIndex = null\n    this.props.tokenobjects.some((token, index) => {\n      if (token.ownedBy === null) {\n        nextIndex = index;\n        return true;\n      }\n      return false;\n    })\n    return nextIndex;\n  }\n\n  submitMove() {\n    const move = new GameMove(\n      this.props.getcurrentplayer().playerId,\n      this.props.columnid,\n      this.getNextTokenIndex()\n    )\n    if (move.rowIndex !== null) {\n      this.props.movesignal(move);\n    }\n  }\n\n  render() {\n    const tokenElements = this.generateTokenElements();\n\n    return (\n      <div className=\"BoardGridColumn\" onClick={this.submitMove} >\n        {tokenElements}\n      </div>\n    );\n  }\n\n  generateTokenElements() {\n    return this.props.tokenobjects.map((token, index) => {\n      return (\n        <React.Fragment key={index}>\n          <Token tokencolour={token.ownedBy !== null ? token.ownedBy.playerColour : \"grey\"} / >\n        </React.Fragment>\n      )\n    }).reverse()\n  }\n}\n\nexport default BoardColumn;\n","\nclass Player {\n\n  constructor(playerId, playerName, playerColour) {\n    this.playerId = playerId\n    this.playerColour = playerColour\n    this.playerName = playerName\n  }\n}\n\nexport default Player;\n","class WinnerFinder {\n\n  constructor(coordValidator) {\n    this.winnerFound = false;\n    this.winner = null;\n    this.BoardState = null;\n    this.coordValidator = coordValidator;\n\n    this.getPositionUpFrom = this.getPositionUpFrom.bind(this);\n    this.getPositionDownFrom = this.getPositionDownFrom.bind(this);\n    this.getPositionRightFrom = this.getPositionRightFrom.bind(this);\n    this.getPositionUpRightFrom = this.getPositionUpRightFrom.bind(this);\n    this.getPositionDownRightFrom = this.getPositionDownRightFrom.bind(this);\n    this.isCoordLineWin = this.isCoordLineWin.bind(this);\n    this.getOwnerOfTokenAtPosition = this.getOwnerOfTokenAtPosition.bind(this);\n  }\n\n  isTokenInAWin(token, columnIndex, rowIndex) {\n    const coordLines = this.getCoordLinesFrom(columnIndex, rowIndex)\n      .filter(coordLine => this.isCoordLineValid(coordLine));\n\n    return coordLines.filter(coordLine => {\n      return this.isCoordLineWin(coordLine);\n    }).length > 0;\n  }\n\n  isCoordLineValid(coordLine) {\n    let valid = true;\n    coordLine.some(coord => {\n      if (this.coordValidator(...coord)) {\n        return false;\n      }\n      valid = false;\n      return true;\n    })\n    return valid;\n  }\n\n  isCoordLineWin(coordLine) {\n    // compare all following owners with the first owner/player\n    const firstPlayer = this.getOwnerOfTokenAtPosition(...coordLine[0]);\n\n    let matchingUser = true;\n\n    coordLine.some(coord => {\n      const owner = this.getOwnerOfTokenAtPosition(...coord);\n\n      if (firstPlayer === null || owner === null) {\n        // check if either owners are null\n        matchingUser = false;\n      } else if (firstPlayer.playerId !== owner.playerId) {\n        // check if users don't equal each other\n        matchingUser = false;\n      }\n      return !matchingUser;\n    })\n\n    return matchingUser;\n  }\n\n  getCoordLinesFrom(columnIndex, rowIndex) {\n    return [this.getPositionRightFrom, this.getPositionUpFrom,\n      this.getPositionUpRightFrom, this.getPositionDownRightFrom]\n      .map(translatorFunc => {\n        return this.getCoordLineFrom(columnIndex, rowIndex, translatorFunc);\n      });\n  }\n\n  getOwnerOfTokenAtPosition(columnIndex, rowIndex) {\n    return this.BoardState[columnIndex][rowIndex].ownedBy;\n  }\n\n  getPositionRightFrom(columnIndex, rowIndex) {\n    return [columnIndex + 1, rowIndex];\n  }\n\n  getPositionUpFrom(columnIndex, rowIndex) {\n    return [columnIndex, rowIndex + 1];\n  }\n\n  getPositionDownFrom(columnIndex, rowIndex) {\n    return [columnIndex, rowIndex - 1];\n  }\n\n  getPositionUpRightFrom(columnIndex, rowIndex) {\n    const above = this.getPositionUpFrom(columnIndex, rowIndex);\n    return this.getPositionRightFrom(...above)\n  }\n\n  getPositionDownRightFrom(columnIndex, rowIndex) {\n    const below = this.getPositionDownFrom(columnIndex, rowIndex);\n    return this.getPositionRightFrom(...below)\n  }\n\n  getCoordLineFrom(columnIndex, rowIndex, translatorFunc) {\n    let coords = [];\n    [...Array(4)].forEach(() => {\n      if (coords.length === 0) {\n        coords.push([columnIndex, rowIndex])\n      } else {\n        const next = coords.slice(-1)[0];\n        coords.push(translatorFunc(...next));\n      }\n    })\n    return coords;\n  }\n\n  analyse(BoardState) {\n    this.setBoardSate(BoardState);\n\n    this.BoardState.some((column, columnIndex) => {\n      column.some((token, rowIndex) => {\n        if (this.isTokenInAWin(token, columnIndex, rowIndex)) {\n          this.winnerFound = true;\n          this.winner = this.getOwnerOfTokenAtPosition(columnIndex, rowIndex);\n        }\n        return this.winnerFound;\n      })\n\n      return this.winnerFound;\n    })\n\n    this.clearBoardState();\n    return this.winnerFound;\n  }\n\n  setBoardSate(BoardState) {\n    this.BoardState = [].concat(BoardState);\n  }\n\n  clearBoardState() {\n    this.BoardState = null;\n  }\n}\n\nexport default WinnerFinder;","import React, { Component } from 'react';\nimport './GameBoard.css';\nimport BoardColumn from './BoardColumn';\nimport Player from './GamePlayer';\nimport WinnerFinder from './WinnerFinder';\n\nclass GameBoard extends Component {\n\n  constructor() {\n    super()\n\n    this.freshState = {\n      nColumns: 7,\n      nRows: 6,\n      players: [],\n      currentPlayer: null,\n      moveHistory: [],\n      gameState: [],\n      winner: null\n    };\n\n    this.state = {...this.freshState};\n\n    this.initialPlayerIndex = 0;\n\n    this.playerColours = ['green', 'pink'];\n\n    this.generateColumnElements = this.generateColumnElements.bind(this);\n    this.generateTokenObjects = this.generateTokenObjects.bind(this);\n    this.generateColumnObjects = this.generateColumnObjects.bind(this);\n    this.getCurrentPlayer = this.getCurrentPlayer.bind(this);\n    this.getNextPlayerIndex = this.getNextPlayerIndex.bind(this);\n    this.endCurrentPlayerTurn = this.endCurrentPlayerTurn.bind(this);\n    this.createPlayers = this.createPlayers.bind(this);\n    this.isCoordOnBoard = this.isCoordOnBoard.bind(this);\n\n    this.WinnerFinder = new WinnerFinder(this.isCoordOnBoard);\n  }\n\n  createPlayers(playerNames, cb=()=>{}) {\n    this.setState({\n      players: playerNames.map((playerName, index) => {\n        return new Player(index, playerName, this.playerColours[index])\n      })\n    }, cb)\n  }\n\n  getCurrentPlayer() {\n    return this.state.currentPlayer;\n  }\n\n  getPlayerById(playerId) {\n    return this.state.players[playerId]\n  }\n\n  getNextPlayerIndex() {\n    const currentPlayerIndex = this.state.players.indexOf(this.getCurrentPlayer());\n    if (currentPlayerIndex + 1 >= this.state.players.length) {\n      return 0;\n    } else {\n      return currentPlayerIndex + 1;\n    }\n  }\n\n  endCurrentPlayerTurn(move) {\n    if (this.state.winner !== null) return;\n    const newMoveHistory = [...this.state.moveHistory, move];\n    this.setState({\n      currentPlayer: this.state.players[this.getNextPlayerIndex()],\n      moveHistory: newMoveHistory,\n      gameState: this.buildGameState(newMoveHistory)\n    }, () => {\n      this.WinnerFinder.analyse(this.state.gameState);\n      if (this.WinnerFinder.winnerFound) {\n        this.setWinner(this.WinnerFinder.winner);\n      }\n    })\n  }\n\n  setWinner(player, cb = () => {}) {\n    console.log(player.playerName);\n    this.setState({\n      winner: player\n    }, cb)\n  }\n\n  generateTokenObjects(column) {\n    return column.map(rowSpace => {\n      return {\n        ...rowSpace\n      }\n    })\n  }\n\n  buildGameState(moveHistory = this.state.moveHistory) {\n    const newGameState = [...Array(this.state.nColumns)].map(() => {\n      return [...Array(this.state.nRows)].map((rowSpace, rowIndex) => {\n        return {\n          ownedBy: null,\n          rowIndex\n        }\n      });\n    })\n\n    moveHistory.forEach(move => {\n      newGameState[move.columnId][move.rowIndex]\n        .ownedBy = this.getPlayerById(move.playerId)\n    })\n\n    return newGameState;\n  }\n\n  generateColumnObjects() {\n    return this.state.gameState.map(column => {\n      return {\n        tokens: this.generateTokenObjects(column)\n      }\n    })\n  }\n\n  isCoordOnBoard(columnIndex, rowIndex) {\n    return ![\n      columnIndex < this.state.nColumns,\n      rowIndex < this.state.nRows,\n      columnIndex >= 0,\n      rowIndex >= 0\n    ].includes(false);\n  }\n\n  componentDidMount() {\n    this.setState({gameState: this.buildGameState()}, () => {\n      this.createPlayers(['player1', 'player2'], () => {\n        this.setState({\n          currentPlayer: this.state.players[this.initialPlayerIndex],\n        })\n      })\n    })\n  }\n\n  render() {\n    const columnElements = this.generateColumnElements();\n\n    return (\n      <div className=\"Board\">\n        <p>{this.state.winner ? this.state.winner.playerName : ''}</p>\n        <div className=\"BoardGrid\" >\n          {columnElements}\n        </div>\n      </div>\n    );\n  }\n\n  generateColumnElements() {\n    const columnObjects = this.generateColumnObjects();\n\n    return columnObjects.map((col, index) => {\n      return (\n        <React.Fragment key={index}>\n          <BoardColumn columnid={index}\n            tokenobjects={col.tokens}\n            getcurrentplayer={this.getCurrentPlayer}\n            movesignal={this.endCurrentPlayerTurn} / >\n        </React.Fragment>\n      )\n    })\n  }\n}\n\nexport default GameBoard;\n","import React, { Component } from 'react';\nimport './App.css';\nimport GameBoard from './GameBoard/GameBoard';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            Connect Four\n          </h1>\n        </header>\n        <div className=\"App-game\">\n          <GameBoard/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}